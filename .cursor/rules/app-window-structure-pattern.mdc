
---
description: Patterns and conventions for app window components
globs: 
alwaysApply: false
---

**App Window Structure Pattern:**

## Core Principles
- All app windows extend `BaseWindowProps` interface (from ScrAppWindow.tsx) for consistent window management
- App-specific windows only define their unique props (e.g., `gameTime: GameTime`)
- Use `{...windowProps}` spread operator to pass through base window management props
- Focus purely on content logic - let ScrAppWindow handle all dragging, resizing, positioning
- **Automatic viewport constraints** - All windows are automatically prevented from being dragged off-screen

## Viewport Constraints (Built-in)
- **Automatic boundary checking** - Windows cannot be dragged outside the viewport
- **Footer-aware positioning** - Accounts for expanded footers (120px) vs collapsed (20px)
- **Immediate repositioning** - Windows automatically move when footers expand or viewport resizes
- **Resize constraints** - Windows cannot be resized larger than available screen space
- **No configuration needed** - All ScrAppWindow instances automatically get viewport constraints

## CSS and Styling
- **DO NOT create app-specific CSS files** unless absolutely necessary for unique styling
- **DO NOT import CSS files** that only contain comments or are empty
- Use existing `.detail-label` and `.detail-value` CSS classes from ScrAppWindow.css for consistent styling
- Use CSS variables from globals.css for spacing, colors, and typography
- For responsive behavior, implement width-based compact levels (C0-C3) within the component logic

## File Structure
```
src/components/scr-apps/{appName}/
├── listItem/{AppName}AppItem.tsx    # Terminal display component
└── window/{AppName}AppWindow.tsx    # Window component (optional - some use generic ScrAppWindow)
```

## Implementation Patterns

### Basic Window (uses generic ScrAppWindow)
```tsx
// Rendered in App.tsx renderWindow() using generic ScrAppWindow
// No custom window component needed
// Automatically gets viewport constraints, drag/resize, footer system
```

### Custom Window (needs specific behavior)
```tsx
import React from 'react';
import ScrAppWindow, { BaseWindowProps } from '../../ScrAppWindow';
import { GameTime } from '../../../../types/gameState';

interface AgeAppWindowProps extends BaseWindowProps {
  gameTime: GameTime; // Only app-specific props
}

const AgeAppWindow: React.FC<AgeAppWindowProps> = ({
  gameTime,
  onWidthChange, // For responsive behavior
  ...windowProps // Spread all window management props (includes position, size, callbacks)
}) => {
  const [compactLevel, setCompactLevel] = useState<'C3' | 'C2' | 'C1' | 'C0'>('C3');

  // Responsive behavior
  const handleWidthChange = (width: number) => {
    setCompactLevel(getCompactLevel(width));
    if (onWidthChange) onWidthChange(width);
  };

  return (
    <ScrAppWindow 
      title="Age Tracker" 
      {...windowProps} // Includes automatic viewport constraints
      minSize={{ width: 100, height: 100 }}
      onWidthChange={handleWidthChange}
    >
      <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--spacing-sm)' }}>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <div className="detail-label">Current Age</div>
          <div className="detail-value">{gameTime.age} Reckonings</div>
        </div>
      </div>
    </ScrAppWindow>
  );
};

export default AgeAppWindow;
```

## Responsive Design Pattern
```tsx
const COMPACT_LEVELS = {
  C3: 270,    // Full text
  C2: 170,    // Medium compact  
  C1: 60,     // Compact
  C0: 50      // Mini
};

const getCompactLevel = (width: number): 'C3' | 'C2' | 'C1' | 'C0' => {
  if (width >= COMPACT_LEVELS.C3) return 'C3';
  if (width >= COMPACT_LEVELS.C2) return 'C2'; 
  if (width >= COMPACT_LEVELS.C1) return 'C1';
  return 'C0';
};
```

## Footer Behavior
- **Collapsible footer** - All windows have ▼ DATA / ▲ HIDE footer toggle
- **Outside window bounds** - Footer extends below the main window area
- **Automatic repositioning** - When footer expands, window moves up if needed to keep footer on-screen
- **Height-aware constraints** - Viewport constraints account for footer height (20px collapsed, 120px expanded)

## Integration with App.tsx
- Register custom windows in `renderWindow()` function
- Pass game state props as needed (credits, gameTime, gamePhase)
- Use window manager callbacks for position/size updates
- **No viewport constraint setup needed** - ScrAppWindow handles this automatically

## Best Practices
- **Trust the base component** - Don't override viewport constraint behavior
- **Use spread props** - Always spread `{...windowProps}` to get all window management
- **Focus on content** - Let ScrAppWindow handle positioning, dragging, constraints
- **Test footer expansion** - Ensure your content works with the collapsible footer system
