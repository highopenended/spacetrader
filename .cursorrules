# SCR App Item Handling Rules

## App Item Structure

### File Organization
- Each app follows the pattern: `src/components/scr-apps/{appName}/`
- Two main components per app:
  - `listItem/{AppName}AppItem.tsx` - Compact display for app list
  - `window/{AppName}AppWindow.tsx` - Full window interface

### Base Components
- **ScrAppItem.tsx** - Base wrapper component for all app list items
- **SortableItem.tsx** - DND-kit wrapper for drag-and-drop functionality
- **ScrAppWindow.tsx** - Base draggable/resizable window component

## App Item Implementation Patterns

### List Item Component Structure
```typescript
import React from 'react';
import './AppNameAppItem.css';
import ScrApp from '../../ScrAppItem';

interface AppNameAppProps {
  // Props based on app type
}

const AppNameApp: React.FC<AppNameAppProps> = ({ props }) => {
  return (
    <ScrApp>
      <div>
        <div className="app-label">App Label</div>
        <div className="app-value">App Value</div>
      </div>
    </ScrApp>
  );
};

export default AppNameApp;
```

### Window Component Structure
```typescript
import React from 'react';
import ScrAppWindow, { BaseWindowProps } from '../../ScrAppWindow';

interface AppNameAppWindowProps extends BaseWindowProps {
  // Additional props specific to this app
}

const AppNameAppWindow: React.FC<AppNameAppWindowProps> = ({
  // props
  ...windowProps
}) => {
  return (
    <ScrAppWindow
      title="App Title"
      {...windowProps}
      minSize={{ width: 200, height: 100 }}
    >
      {/* Window content */}
    </ScrAppWindow>
  );
};
```

## App Registration

### Constants File
- Register new apps in `src/constants/scrAppListConstants.ts`
- Add to `APP_REGISTRY` with metadata:
  - `id`, `name`, `title`, `component`, `category`, `cost`, `deletable`, `description`
- Add to `DEFAULT_INSTALLED_APPS` if it should start installed

### Type Definitions
- Add new app types to `src/types/scrAppListState.ts`
- Extend `AppType` union type for new apps

## Styling Conventions

### CSS Classes
- Use existing classes from `globals.css` when possible
- Common app classes:
  - `.app-label` - App name/title
  - `.app-value` - Main display value
  - `.detail-label` - Window detail labels
  - `.detail-value` - Window detail values

### Color Scheme
- Follow gritty 80s sci-fi theme
- Primary colors: blacks, whites, greys
- Accent colors only when specifically requested
- Use CSS variables for consistency

## Drag-and-Drop Integration

### SortableItem Usage
- Wrap all app list items with `SortableItem`
- Provide `id`, `onAppClick`, `isWindowOpen` props
- Handle click events for window toggling

### Window Management
- Use `useWindowManager` hook for window state
- Implement `openOrCloseWindow` for app clicks
- Handle window positioning and sizing callbacks
- **Automatic viewport constraints** - All windows stay within screen bounds
- **Footer-aware positioning** - Windows reposition when footers expand

## Responsive Design

### Compact Levels
- Implement responsive behavior for window resizing
- Use width-based compact levels (C0-C3) for content adaptation
- Example from AgeAppWindow:
  ```typescript
  const COMPACT_LEVELS = {
    C3: 270,    // Full text
    C2: 170,    // Medium compact
    C1: 60,     // Compact
    C0: 50      // Mini
  };
  ```

## Special App Types

### Core Apps
- Cannot be deleted (`deletable: false`)
- Always available (`category: 'core'`)
- Examples: credits, scrAppStore

### Utility Apps
- Can be deleted (`deletable: true`)
- Purchasable through gameplay
- Examples: jobTitle, age, date, purgeZone

### Future Apps
- Defined in registry but not implemented
- Include `unlockRequirements` for progression gates
- Examples: scanner, navMap

## Integration Points

### App.tsx
- Main orchestrator using DndContext
- Handles window rendering and app state
- Manages drag-and-drop collision detection

### TerminalScreen.tsx
- Renders app list using SortableContext
- Handles app click events
- Manages window state integration

### Hooks
- `useGameState` - Unified game state management (credits, time, phases, apps)
- `useWindowManager` - Window positions and sizes
- `useDragHandler_Windows` - Window positioning and resizing with viewport constraints
- `useDragHandler_Apps` - App list drag-and-drop for reordering and deletion
- `useViewportBounds` - Viewport constraint management

## Best Practices

### Code Organization
- Keep app components focused and single-purpose
- Use TypeScript interfaces for type safety
- Follow existing naming conventions

### Performance
- Use React.memo for list items if needed
- Implement proper dependency arrays in useEffect
- Avoid unnecessary re-renders

### Accessibility
- Provide proper ARIA labels
- Support keyboard navigation
- Maintain focus management

### Documentation
- Add JSDoc comments for complex components
- Document prop interfaces
- Explain special behaviors (like purge zone)

## Common Patterns

### App Props Building
```typescript
const getAppProps = () => {
  switch (appConfig.id) {
    case 'credits': return { credits };
    case 'jobTitle': return { gamePhase };
    case 'age': return { gameTime };
    case 'date': return { gameTime, gamePhase };
    case 'scrAppStore': return { hasNewApps: true };
    default: return {};
  }
};
```

### Window Callback Handling
```typescript
onClose={() => closeWindow(window.id)}
onPositionChange={(position) => updateWindowPosition(window.appType, position)}
onSizeChange={(size) => updateWindowSize(window.appType, size)}
```

### Drag State Management
- Use `dragState.isDragging` for visual feedback
- Handle `pendingDeleteAppId` for deletion confirmation
- Track `openAppTypes` for window state 